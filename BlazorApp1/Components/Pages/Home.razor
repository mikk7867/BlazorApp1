@page "/"
@using Microsoft.AspNetCore.Identity;
@inject IServiceProvider _serviceProvider;
@* @inject UserManager<Data.ApplicationUser> UserManager *@
    @inject AuthenticationStateProvider _authenticationStateProvider;

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        <p>You are logged in!</p>
    </Authorized>
    <NotAuthorized>
        <p>You are NOT logged in!</p>
    </NotAuthorized>
</AuthorizeView>
<AuthorizeView Roles="Admin">
    <Authorized>
        <p>You are admin!</p>
    </Authorized>
</AuthorizeView>




@code {
    private bool _isAuthenticated;
    private bool _isAdmin;

    public bool AuthStatus => _isAuthenticated;
    public bool AdminStatus => _isAdmin;


    protected override async Task OnInitializedAsync()
    {
        //await CreateUserRolesAsync("mikk7867@gmail.com", "Admin");
        var authenticationState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var authUser = authenticationState.User;
        _isAuthenticated = authUser.Identity.IsAuthenticated;
        _isAdmin = authUser.IsInRole("Admin");
    }
    /*
    public async Task CreateUserRolesAsync(string user, string role)
    {
        var roleManager = _serviceProvider.GetRequiredService<RoleManager<IdentityRole>>();
        var userManager = UserManager;

        var userRoleCheck = await roleManager.RoleExistsAsync(role);
        if (!userRoleCheck)
            await roleManager.CreateAsync(new IdentityRole(role));

        Data.ApplicationUser identityUser = await userManager.FindByEmailAsync(user);
        await userManager.AddToRoleAsync(identityUser, role);
    }*/
}